/*
 * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

#include "am33xx.dtsi"

/ {
	model = "TI AM335x EVM";
	compatible = "ti,am335x-evm", "ti,am33xx";

	cpus {
		cpu@0 {
			cpu0-supply = <&vdd1_reg>;
		};
	};

	memory {
		device_type = "memory";
		reg = <0x80000000 0x20000000>; /* 512 MB */
	};

	am33xx_pinmux: pinmux@44e10800 {

		i2c0_pins: pinmux_i2c0_pins {
			pinctrl-single,pins = <
				0x188 (PIN_INPUT_PULLUP | MUX_MODE0)	/* i2c0_sda.i2c0_sda */
				0x18c (PIN_INPUT_PULLUP | MUX_MODE0)	/* i2c0_scl.i2c0_scl */
			>;
		};

		uart0_pins: pinmux_uart0_pins {
			pinctrl-single,pins = <
				0x170 (PIN_INPUT_PULLUP | MUX_MODE0)	/* uart0_rxd.uart0_rxd */
				0x174 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart0_txd.uart0_txd */
			>;
		};

		uart1_pins_default: pinmux_uart1_pins_default {
			pinctrl-single,pins = <
				0x178 (PIN_INPUT | MUX_MODE0)			/* uart1_ctsn.uart1_ctsn */
				0x17C (PIN_OUTPUT_PULLDOWN | MUX_MODE0)		/* uart1_rtsn.uart1_rtsn */
				0x180 (PIN_INPUT_PULLUP | MUX_MODE0)		/* uart1_rxd.uart1_rxd */
				0x184 (PIN_OUTPUT_PULLDOWN | MUX_MODE0) 	/* uart1_txd.uart1_txd */
			>;
		};

		uart1_pins_sleep: pinmux_uart1_pins_sleep {
			pinctrl-single,pins = <
				0x178 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x17C (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x180 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x184 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			>;
		};

		uart4_pins_default: pinmux_uart4_pins_default {
			pinctrl-single,pins = <
				0x168 (PIN_INPUT_PULLUP | MUX_MODE1)		/* uart0_ctsn.uart4_rxd */
				0x16C (PIN_OUTPUT_PULLDOWN | MUX_MODE0)		/* uart0_rtsn.uart4_txd */
			>;
		};

		uart4_pins_sleep: pinmux_uart4_pins_sleep {
			pinctrl-single,pins = <
				0x168 (PIN_INPUT_PULLDOWN | MUX_MODE7)		/* uart0_ctsn.uart4_rxd */
				0x16C (PIN_INPUT_PULLDOWN | MUX_MODE7)		/* uart0_rtsn.uart4_txd */
			>;
		};		

		gpmc_default: pinmux_gpmc_default {
			pinctrl-single,pins = <
				/* for nand flash */
				0x0  (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad0.gpmc_ad0 */
				0x4  (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad1.gpmc_ad1 */
				0x8  (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad2.gpmc_ad2 */
				0xc  (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad3.gpmc_ad3 */
				0x10 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad4.gpmc_ad4 */
				0x14 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad5.gpmc_ad5 */
				0x18 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad6.gpmc_ad6 */
				0x1c (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad7.gpmc_ad7 */
				0x70 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_wait0.gpmc_wait0 */
				0x74 (PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_wpn.gpmc_wpn */
				0x7c (PIN_OUTPUT | MUX_MODE0)		/* gpmc_csn0.gpmc_csn0  */
				0x90 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_advn_ale.gpmc_advn_ale */
				0x94 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_oen_ren.gpmc_oen_ren */
				0x98 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_wen.gpmc_wen */
				0x9c (PIN_OUTPUT | MUX_MODE0)		/* gpmc_be0n_cle.gpmc_be0n_cle */
				
				/* for FPGA */
				0x0  (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad0.gpmc_ad0 */
				0x4  (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad1.gpmc_ad1 */
				0x8  (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad2.gpmc_ad2 */
				0xc  (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad3.gpmc_ad3 */
				0x10 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad4.gpmc_ad4 */
				0x14 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad5.gpmc_ad5 */
				0x18 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad6.gpmc_ad6 */
				0x1c (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad7.gpmc_ad7 */
				0x20  (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad8.gpmc_ad8 */
				0x24  (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad9.gpmc_ad9 */
				0x28  (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad10.gpmc_ad10 */
				0x2c  (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad11.gpmc_ad11 */
				0x30 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad12.gpmc_ad12 */
				0x34 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad13.gpmc_ad13 */
				0x38 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad14.gpmc_ad14 */
				0x3c (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad15.gpmc_ad15 */

				0xa0 (PULL_DISABLE | MUX_MODE1) /* lcd_data0.gpmc_a0 */
				0xa4 (PULL_DISABLE | MUX_MODE1) /* lcd_data1.gpmc_a1 */
				0xa8 (PULL_DISABLE | MUX_MODE1) /* lcd_data2.gpmc_a2 */
				0xac (PULL_DISABLE | MUX_MODE1) /* lcd_data3.gpmc_a3 */
				0xb0 (PULL_DISABLE | MUX_MODE1) /* lcd_data4.gpmc_a4 */
				0xb4 (PULL_DISABLE | MUX_MODE1) /* lcd_data5.gpmc_a5 */
				0xb8 (PULL_DISABLE | MUX_MODE1) /* lcd_data6.gpmc_a6 */
				0xbc (PULL_DISABLE | MUX_MODE1) /* lcd_data7.gpmc_a7 */

				0xc0 (PULL_DISABLE | MUX_MODE1) /* lcd_data8.gpmc_a12 */
				0xc4 (PULL_DISABLE | MUX_MODE1) /* lcd_data9.gpmc_a13 */
				0xc8 (PULL_DISABLE | MUX_MODE1) /* lcd_data10.gpmc_a14 */
				0xcc (PULL_DISABLE | MUX_MODE1) /* lcd_data11.gpmc_a15 */
				0xd0 (PULL_DISABLE | MUX_MODE1) /* lcd_data12.gpmc_a16 */
				0xd4 (PULL_DISABLE | MUX_MODE1) /* lcd_data13.gpmc_a17 */
				0xd8 (PULL_DISABLE | MUX_MODE1) /* lcd_data14.gpmc_a18 */
				0xdc (PULL_DISABLE | MUX_MODE1) /* lcd_data15.gpmc_a19 */

				0xe0 (PULL_DISABLE | MUX_MODE1) /* lcd_vsync.gpmc_a8 */
				0xe4 (PULL_DISABLE | MUX_MODE1) /* lcd_hsync.gpmc_a9 */
				0xe8 (PULL_DISABLE | MUX_MODE1) /* lcd_pclk.gpmc_a10 */
				0xec (PULL_DISABLE | MUX_MODE1) /* lcd_ac_bias_en.gpmc_a11 */

				0x7c (PULL_DISABLE | MUX_MODE0) /* gpmc_csn0.gpmc_csn0 */
				0x80 (PULL_DISABLE | MUX_MODE0) /* gpmc_csn1.gpmc_csn1 */
				0x84 (PULL_DISABLE | MUX_MODE0) /* gpmc_csn2.gpmc_csn2 */
				0x88 (PULL_DISABLE | MUX_MODE0) /* gpmc_csn3.gpmc_csn3 */

				0x8c (PIN_INPUT_PULLUP | MUX_MODE0) /* gpmc_clk.gpmc_clk */
				0x70 (PIN_INPUT_PULLUP | MUX_MODE0) /* gpmc_wait0.gpmc_wait0 */

				0x9c (PULL_DISABLE | MUX_MODE0) /* gpmc_be0n_cle.gpmc_be0n_cle */

				0x78 (PULL_DISABLE | MUX_MODE0) /* gpmc_be1n.gpmc_be1n */

				/*0x74 (PIN_OUTPUT_PULLUP | MUX_MODE0)*/ /* gpmc_wpn.gpmc_wpn */

				0x90 (PULL_DISABLE | MUX_MODE0) /* gpmc_advn_ale.gpmc_advn_ale */
				0x94 (PULL_DISABLE | MUX_MODE0) /* gpmc_oen_ren.gpmc_oen_ren */
				0x98 (PULL_DISABLE | MUX_MODE0) /* gpmc_wen.gpmc_wen */

				0x164 (PULL_DISABLE | MUX_MODE7) /* ecap0_in_pwm0_out.gpio0_7 */
				0x190 (PULL_DISABLE | MUX_MODE7) /* mcasp0_aclkx.gpio3_14 */
				0x194 (PIN_INPUT_PULLUP | MUX_MODE7) /* mcasp0_fsx.gpio3_15 */
				0x198 (PIN_INPUT_PULLUP | MUX_MODE7) /* mcasp0_axr0.gpio3_16 */
				0x19c (PULL_DISABLE | MUX_MODE7) /* mcasp0_ahclkr.gpio3_17 */
				0x1a0 (PIN_INPUT_PULLUP | MUX_MODE7) /* mcasp0_aclkr.gpio3_18 */
				0x1a4 (PULL_DISABLE | MUX_MODE7) /* mcasp0_fsr.gpio3_19 */
				0x1a8 (PULL_DISABLE | MUX_MODE7) /* mcasp0_axr1.gpio3_20 */
				0x1ac (PULL_DISABLE | MUX_MODE7) /* mcasp0_ahclkx.gpio3_21 */
				0x1b0 (PULL_DISABLE | MUX_MODE7) /* xdma_event_intr0.gpio0_19 */
				0x1b4 (PULL_DISABLE | MUX_MODE7) /* xdma_event_intr1.gpio0_20 */
			>;
		};

		gpmc_sleep: pinmux_gpmc_sleep {
			pinctrl-single,pins = <
				/* for nand flash */
				0x0  (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad0.gpmc_ad0 */
				0x4  (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad1.gpmc_ad1 */
				0x8  (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad2.gpmc_ad2 */
				0xc  (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad3.gpmc_ad3 */
				0x10 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad4.gpmc_ad4 */
				0x14 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad5.gpmc_ad5 */
				0x18 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad6.gpmc_ad6 */
				0x1c (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad7.gpmc_ad7 */
				0x70 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_wait0.gpmc_wait0 */
				0x74 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_wpn.gpmc_wpn */
				0x7c (PIN_INPUT_PULLDOWN  | MUX_MODE7)		/* gpmc_csn0.gpmc_csn0  */
				0x90 (PIN_INPUT_PULLDOWN  | MUX_MODE7)		/* gpmc_advn_ale.gpmc_advn_ale */
				0x94 (PIN_INPUT_PULLDOWN  | MUX_MODE7)		/* gpmc_oen_ren.gpmc_oen_ren */
				0x98 (PIN_INPUT_PULLDOWN  | MUX_MODE7)		/* gpmc_wen.gpmc_wen */
				0x9c (PIN_INPUT_PULLDOWN  | MUX_MODE7)		/* gpmc_be0n_cle.gpmc_be0n_cle */
				
				/* for FPGA */
				0x0  (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad0.gpmc_ad0 */
				0x4  (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad1.gpmc_ad1 */
				0x8  (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad2.gpmc_ad2 */
				0xc  (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad3.gpmc_ad3 */
				0x10 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad4.gpmc_ad4 */
				0x14 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad5.gpmc_ad5 */
				0x18 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad6.gpmc_ad6 */
				0x1c (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad7.gpmc_ad7 */
				0x20  (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad8.gpmc_ad8 */
				0x24  (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad9.gpmc_ad9 */
				0x28  (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad10.gpmc_ad10 */
				0x2c  (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad11.gpmc_ad11 */
				0x30 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad12.gpmc_ad12 */
				0x34 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad13.gpmc_ad13 */
				0x38 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad14.gpmc_ad14 */
				0x3c (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad15.gpmc_ad15 */

				0xa0 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_data0.gpmc_a0 */
				0xa4 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_data1.gpmc_a1 */
				0xa8 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_data2.gpmc_a2 */
				0xac (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_data3.gpmc_a3 */
				0xb0 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_data4.gpmc_a4 */
				0xb4 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_data5.gpmc_a5 */
				0xb8 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_data6.gpmc_a6 */
				0xbc (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_data7.gpmc_a7 */

				0xc0 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_data8.gpmc_a12 */
				0xc4 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_data9.gpmc_a13 */
				0xc8 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_data10.gpmc_a14 */
				0xcc (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_data11.gpmc_a15 */
				0xd0 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_data12.gpmc_a16 */
				0xd4 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_data13.gpmc_a17 */
				0xd8 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_data14.gpmc_a18 */
				0xdc (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_data15.gpmc_a19 */

				0xe0 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_vsync.gpmc_a8 */
				0xe4 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_hsync.gpmc_a9 */
				0xe8 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_pclk.gpmc_a10 */
				0xec (PIN_INPUT_PULLDOWN | MUX_MODE7) /* lcd_ac_bias_en.gpmc_a11 */

				0x7c (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_csn0.gpmc_csn0 */
				0x80 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_csn1.gpmc_csn1 */
				0x84 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_csn2.gpmc_csn2 */
				0x88 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_csn3.gpmc_csn3 */

				0x8c (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_clk.gpmc_clk */
				0x70 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_wait0.gpmc_wait0 */

				0x9c (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_be0n_cle.gpmc_be0n_cle */

				0x78 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_be1n.gpmc_be1n */

				/*0x74 (PIN_INPUT_PULLDOWN | MUX_MODE7)*/ /* gpmc_wpn.gpmc_wpn */

				0x90 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_advn_ale.gpmc_advn_ale */
				0x94 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_oen_ren.gpmc_oen_ren */
				0x98 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_wen.gpmc_wen */

				0x164 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* ecap0_in_pwm0_out.gpio0_7 */
				0x190 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* mcasp0_aclkx.gpio3_14 */
				0x194 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* mcasp0_fsx.gpio3_15 */
				0x198 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* mcasp0_axr0.gpio3_16 */
				0x19c (PIN_INPUT_PULLDOWN | MUX_MODE7) /* mcasp0_ahclkr.gpio3_17 */
				0x1a0 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* mcasp0_aclkr.gpio3_18 */
				0x1a4 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* mcasp0_fsr.gpio3_19 */
				0x1a8 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* mcasp0_axr1.gpio3_20 */
				0x1ac (PIN_INPUT_PULLDOWN | MUX_MODE7) /* mcasp0_ahclkx.gpio3_21 */
				0x1b0 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* xdma_event_intr0.gpio0_19 */
				0x1b4 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* xdma_event_intr1.gpio0_20 */
			>;
		};

		cpsw_default: cpsw_default {
			pinctrl-single,pins = <
				/* Slave 1 */
				0x114 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txen.rgmii1_tctl */
				0x118 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxdv.rgmii1_rctl */
				0x11c (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txd3.rgmii1_td3 */
				0x120 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txd2.rgmii1_td2 */
				0x124 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txd1.rgmii1_td1 */
				0x128 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txd0.rgmii1_td0 */
				0x12c (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txclk.rgmii1_tclk */
				0x130 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxclk.rgmii1_rclk */
				0x134 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxd3.rgmii1_rd3 */
				0x138 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxd2.rgmii1_rd2 */
				0x13c (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxd1.rgmii1_rd1 */
				0x140 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxd0.rgmii1_rd0 */

				/* Slave 2 */
				0x40 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a0.rgmii2_tctl */
				0x44 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a1.rgmii2_rctl */
				0x48 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a2.rgmii2_td3 */
				0x4c (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a3.rgmii2_td2 */
				0x50 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a4.rgmii2_td1 */
				0x54 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a5.rgmii2_td0 */
				0x58 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a6.rgmii2_tclk */
				0x5c (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a7.rgmii2_rclk */
				0x60 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a8.rgmii2_rd3 */
				0x64 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a9.rgmii2_rd2 */
				0x68 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a10.rgmii2_rd1 */
				0x6c (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a11.rgmii2_rd0 */
			>;
		};

		cpsw_sleep: cpsw_sleep {
			pinctrl-single,pins = <
				/* Slave 1 reset value */
				0x114 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x118 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x11c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x120 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x124 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x128 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x12c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x130 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x134 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x138 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x13c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x140 (PIN_INPUT_PULLDOWN | MUX_MODE7)

				/* Slave 2 reset value*/
				0x40 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x44 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x48 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x4c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x50 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x54 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x58 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x5c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x60 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x64 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x68 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x6c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			>;
		};

		davinci_mdio_default: davinci_mdio_default {
			pinctrl-single,pins = <
				/* MDIO */
				0x148 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE0)	/* mdio_data.mdio_data */
				0x14c (PIN_OUTPUT_PULLUP | MUX_MODE0)			/* mdio_clk.mdio_clk */
			>;
		};

		davinci_mdio_sleep: davinci_mdio_sleep {
			pinctrl-single,pins = <
				/* MDIO reset value */
				0x148 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x14c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			>;
		};
	};

	ocp {
		uart0: serial@44e09000 {
			pinctrl-names = "default";
			pinctrl-0 = <&uart0_pins>;

			status = "okay";
		};

		uart1: serial@48022000 {
			pinctrl-names = "default", "sleep";
			pinctrl-0 = <&uart1_pins_default>;
			pinctrl-1 = <&uart1_pins_sleep>;

			status = "okay";
		};

		uart4: serial@481a8000 {
			pinctrl-names = "default", "sleep";
			pinctrl-0 = <&uart4_pins_default>;
			pinctrl-1 = <&uart4_pins_sleep>;

			status = "okay";
		};

		i2c0: i2c@44e0b000 {
			pinctrl-names = "default";
			pinctrl-0 = <&i2c0_pins>;

			status = "okay";
			clock-frequency = <400000>;

			tps: tps@2d {
				reg = <0x2d>;
			};
		};

		elm: elm@48080000 {
			status = "okay";
		};

		gpmc: gpmc@50000000 {
			status = "okay";
			pinctrl-names = "default", "sleep";
			pinctrl-0 = <&gpmc_default>;
			pinctrl-1 = <&gpmc_sleep>;
			ranges = <0 0 0x08000000 0x10000000>;	/* CS0: NAND */
			nand@0,0 {
				reg = <0 0 0>; /* CS0, offset 0 */
				nand-bus-width = <8>;
				gpmc,device-width = <1>;
				gpmc,sync-clk-ps = <0>;
				gpmc,cs-on-ns = <0>;
				gpmc,cs-rd-off-ns = <44>;
				gpmc,cs-wr-off-ns = <44>;
				gpmc,adv-on-ns = <6>;
				gpmc,adv-rd-off-ns = <34>;
				gpmc,adv-wr-off-ns = <44>;
				gpmc,we-on-ns = <0>;
				gpmc,we-off-ns = <40>;
				gpmc,oe-on-ns = <0>;
				gpmc,oe-off-ns = <54>;
				gpmc,access-ns = <64>;
				gpmc,rd-cycle-ns = <82>;
				gpmc,wr-cycle-ns = <82>;
				gpmc,wait-on-read = "true";
				gpmc,wait-on-write = "true";
				gpmc,bus-turnaround-ns = <0>;
				gpmc,cycle2cycle-delay-ns = <0>;
				gpmc,clk-activation-ns = <0>;
				gpmc,wait-monitoring-ns = <0>;
				gpmc,wr-access-ns = <40>;
				gpmc,wr-data-mux-bus-ns = <0>;
				ti,nand-ecc-opt= "bch8";
				ti,elm-id = <&elm>;
				/* MTD partition table */
		                /* All SPL-* partitions are sized to minimal length
				 * which can be independently programmable. For
				 * NAND flash this is equal to size of erase-block */
				#address-cells = <1>;
				#size-cells = <1>;
				partition@0 {
					label = "NAND.SPL";
					reg = <0x00000000 0x000020000>;
				};
				partition@1 {
					label = "NAND.SPL.backup1";
					reg = <0x00020000 0x00020000>;
				};
				partition@2 {
					label = "NAND.SPL.backup2";
					reg = <0x00040000 0x00020000>;
				};
				partition@3 {
					label = "NAND.SPL.backup3";
					reg = <0x00060000 0x00020000>;
				};
				partition@4 {
					label = "NAND.u-boot-spl-os";
					reg = <0x00080000 0x00040000>;
				};
				partition@5 {
					label = "NAND.u-boot";
					reg = <0x000C0000 0x00100000>;
				};
				partition@6 {
					label = "NAND.u-boot-env";
					reg = <0x001C0000 0x00020000>;
				};
				partition@7 {
					label = "NAND.u-boot-env.backup1";
					reg = <0x001E0000 0x00020000>;
				};
				partition@8 {
					label = "NAND.kernel";
					reg = <0x00200000 0x00800000>;
				};
				partition@9 {
					label = "NAND.file-system";
					reg = <0x00A00000 0x0F600000>;
				};
			};
		};
	};

	vbat: fixedregulator@0 {
		compatible = "regulator-fixed";
		regulator-name = "vbat";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-boot-on;
	};

	lis3_reg: fixedregulator@1 {
		compatible = "regulator-fixed";
		regulator-name = "lis3_reg";
		regulator-boot-on;
	};
};

#include "tps65910.dtsi"

&tps {
	vcc1-supply = <&vbat>;
	vcc2-supply = <&vbat>;
	vcc3-supply = <&vbat>;
	vcc4-supply = <&vbat>;
	vcc5-supply = <&vbat>;
	vcc6-supply = <&vbat>;
	vcc7-supply = <&vbat>;
	vccio-supply = <&vbat>;

	regulators {
		vrtc_reg: regulator@0 {
			regulator-always-on;
		};

		vio_reg: regulator@1 {
			regulator-always-on;
		};

		vdd1_reg: regulator@2 {
			/* VDD_MPU voltage limits 0.95V - 1.26V with +/-4% tolerance */
			regulator-name = "vdd_mpu";
			regulator-min-microvolt = <912500>;
			regulator-max-microvolt = <1312500>;
			regulator-boot-on;
			regulator-always-on;
		};

		vdd2_reg: regulator@3 {
			/* VDD_CORE voltage limits 0.95V - 1.1V with +/-4% tolerance */
			regulator-name = "vdd_core";
			regulator-min-microvolt = <912500>;
			regulator-max-microvolt = <1150000>;
			regulator-boot-on;
			regulator-always-on;
		};

		vdd3_reg: regulator@4 {
			regulator-always-on;
		};

		vdig1_reg: regulator@5 {
			regulator-always-on;
		};

		vdig2_reg: regulator@6 {
			regulator-always-on;
		};

		vpll_reg: regulator@7 {
			regulator-always-on;
		};

		vdac_reg: regulator@8 {
			regulator-always-on;
		};

		vaux1_reg: regulator@9 {
			regulator-always-on;
		};

		vaux2_reg: regulator@10 {
			regulator-always-on;
		};

		vaux33_reg: regulator@11 {
			regulator-always-on;
		};

		vmmc_reg: regulator@12 {
			regulator-min-microvolt = <1800000>;
			regulator-max-microvolt = <3300000>;
			regulator-always-on;
		};
	};
};

&mac {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&cpsw_default>;
	pinctrl-1 = <&cpsw_sleep>;
	dual_emac;
};

&davinci_mdio {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&davinci_mdio_default>;
	pinctrl-1 = <&davinci_mdio_sleep>;
};

&cpsw_emac0 {
	phy_id = <&davinci_mdio>, <1>;
	phy-mode = "rgmii";
};

&cpsw_emac1 {
	phy_id = <&davinci_mdio>, <2>;
	phy-mode = "rgmii";
};

&mmc1 {
	status = "okay";
	vmmc-supply = <&vmmc_reg>;
	bus-width = <4>;
};


